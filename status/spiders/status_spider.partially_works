from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from scrapy.http import FormRequest

from status.items import StatusItem

DEBUG =1

class StatusSpider(BaseSpider):
   name = "Boo Ya"
   allowed_domains = ["nyc.gov"]
   start_urls = [
                "http://a841-dotvweb01.nyc.gov/ParkingRegs/ViewController/LocationValidation.aspx"
    ]

   form_data = { 'ddlOnBoro': 3 }
   on_street = "JOHN STREET"
   file_no = 1

   def log_response(self, response, step_no):
        # body 
        calling_fcn =  inspect.stack()[1][3]
        f = open(self.out_dir + "/body_" + calling_fcn + "_" +  str(self.file_no) + ".html", mode="w")
        f.write(response.body)
        f.close

   def get_viewstate(self, response):
      hxs = HtmlXPathSelector(response)
      vs = hxs.select('//form/input[@name="__VIEWSTATE"]/@value').extract()
      if DEBUG > 3: print "Current view state %s" % vs
      return vs


   def select_boro(self, response):
      viewstate = self.get_viewstate(response)

      form_data = { 'ddlOnBoro': 3, '__VIEWSTATE' : viewstate }
      return [FormRequest.from_response(response,
                        formdata=form_data, clickdata = {"name":"Button7"},
                        callback=self.select_street)]
    
    
   def select_street(self, response):
      viewstate = self.get_viewstate(response)

      form_data = { 'ddlOnBoro': 3, 'iddOnstreet:txTextBox':self.on_street, '__VIEWSTATE' : viewstate }
      return [FormRequest.from_response(response,
                        formdata=form_data, clickdata = {"name":"Button6"},
                        callback=self.select_crossstreet1)]


   def select_crossstreet1(self, response):
      viewstate = self.get_viewstate(response)
      hxs = HtmlXPathSelector(response)
      from_streets = hxs.select('//select[@name = "iddFromstreet:ddlDropDown"]/option/text()').extract()
      print "Found %d cross streets for %s" % (len(from_streets), self.on_street)
      
      for (option, from_street) in enumerate(from_streets):
         if option == 0: continue
         print "(from streets) %s" % from_street
         formdata = { 'ddlOnBoro': 3, 'iddOnstreet:txTextBox':self.on_street, '__VIEWSTATE' : viewstate , 'iddFromstreet:ddlDropDown' : option}

         yield FormRequest.from_response(response,
                        formdata=formdata, 
                        clickdata = {"name":"Button7"},
                        callback=lambda r, o = option: self.select_crossstreet2(r, o)) 


   def select_crossstreet2(self, response, from_option):       
      viewstate = self.get_viewstate(response)
      hxs = HtmlXPathSelector(response)
      to_streets = hxs.select('//select[@name = "iddTostreet:ddlDropDown"]/option/text()').extract()
      for (option, to_street) in enumerate(to_streets):
         if option == 0: continue
         print "(to_street) %s" % to_street
         formdata = { 'ddlOnBoro': 3, 'iddOnstreet:txTextBox':self.on_street, '__VIEWSTATE' : viewstate , 'iddFromstreet:ddlDropDown' : from_option, 'iddTostreet:ddlDropDown' : option}
         yield FormRequest.from_response(response,
                        formdata=formdata, 
                        clickdata = {"name":"Button7"},
                        callback=self.step_four)

   def step_four(self, response):
      #self.log_response(self.file_no)
      self.file_no += 1
      hxs = HtmlXPathSelector(response)
      from_street = hxs.select("//select[@id = 'iddFromstreet_ddlDropDown']/option[@selected = 'selected']/text()").extract()
      the_to_street = hxs.select("//select[@name = 'iddTostreet:ddlDropDown']/option[@selected = 'selected']/text()").extract()
      print "This is the to street %s" % the_to_street
    
      found_regs = hxs.select('//table[@id = "GridView1"]/tr')
      n_regs = len(found_regs) - 1
      if DEBUG >= 1: print "STEP FIVE: Found %d regulations for %s AND %s" % (n_regs, from_street, the_to_street)
     


   def parse(self, response):
      viewstate = self.get_viewstate(response)
      print "Searching for regulations around %s" % self.on_street

      form_data = { 'ddlOnBoro': 3, '__VIEWSTATE' : viewstate }
      return [FormRequest.from_response(response,
                        formdata=form_data, clickdata = {"name":"Button7"},
                        callback=self.select_boro)]
#                       callback=lambda r: self.select_boro(r, viewstate))]
